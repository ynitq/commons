#====================== variable ===========================#
#日志输出目录定义
system.logPath = target/log/

#default

#日志输出目的地
#org.apache.log4j.ConsoleAppender（控制台），
#org.apache.log4j.FileAppender（文件），
#org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），
#org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），
#org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）  
default.appender = org.apache.log4j.DailyRollingFileAppender 

#日志输出格式
#org.apache.log4j.HTMLLayout（以HTML表格形式布局），
#org.apache.log4j.PatternLayout（可以灵活地指定布局模式），
#org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），
#org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息） 
default.layout = org.apache.log4j.PatternLayout

#日志输出打印参数
#%c 输出日志信息所属的类的全名
#%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy-MM-dd HH:mm:ss }，输出类似：2002-10-18- 22：10：28
#%f 输出日志信息所属的类的类名
#%l 输出日志事件的发生位置，即输出日志信息的语句处于它所在的类的第几行
#%m 输出代码中指定的信息，如log(message)中的message
#%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”
#%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL。如果是调用debug()输出的，则为DEBUG，依此类推
#%r 输出自应用启动到输出该日志信息所耗费的毫秒数
#%t 输出产生该日志事件的线程名
default.layout.ConversionPattern = %-d{dd HH:mm:ss} [%t] %-5p (%2F:%L) - %m%n
#default.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} [%t] %-5p %-30c{2}:%L - %m%n
#default.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} %t %-5p %c{2}:[%L]:%m%n
#default.layout.ConversionPattern =%-5p (%F:%L) - %m%n

#true表示消息增加到指定文件中，false则将消息覆盖指定的文件内容
default.append = false

#日志输出级别
#ERROR 为严重错误 主要是程序的错误
#WARN 为一般警告，比如session丢失
#INFO 为一般要显示的信息，比如登录登出
#DEBUG 为程序的调试信息
default.logLevel = debug

#-----------------------root 基础 -------------------#
#日志输出级别
log4j.rootLogger = error,stdout
#日志输出目的地（参照默认定义）
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
#日志输出格式（参照默认定义）
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
#日志输出打印参数（参照默认定义）
log4j.appender.stdout.layout.ConversionPattern = ${default.layout.ConversionPattern}

#----------------------- server linZiShh 自定义输出配置 -------------------#
#设置自定义指向的包
log4j.category.com.linzi.framework = ${default.logLevel}, framework
log4j.appender.framework = ${default.appender}
#文件目录及文件
log4j.appender.framework.file=${system.logPath}/framework.log
#日志后缀格式
log4j.appender.framework.DatePattern='.'yyyyMMdd'.log'
log4j.appender.framework.layout = ${default.layout}
log4j.appender.framework.layout.ConversionPattern = ${default.layout.ConversionPattern}
log4j.appender.framework.append = ${default.append}